name: Test Creating RKE2 Cluster

# TODO figure out when this should trigger. Needs published AMI to work
on:
  workflow_call:

permissions:
  id-token: write
  contents: read

jobs:
  test-clean-install-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_COMMERCIAL_ROLE_TO_ASAMI_ID=$(jqSUME }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-west-2
          role-duration-seconds: 21600

      - name: Validate Ubuntu AMI
        run: make validate-ami-ubuntu

      - name: Publish Ubuntu AMI
        run: make publish-ami-ubuntu

      - name: Grab AMI ID
        run: echo "TEST_AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)" >> $GITHUB_ENV

      - name: Create RKE2 cluster
        env:
          SHA: ${{ github.sha }}
        run: |
          terraform init -force-copy \
            -backend-config="bucket=uds-ci-state-bucket" \
            -backend-config="key=tfstate/ci/install/${SHA:0:7}-rke2.tfstate" \
            -backend-config="region=us-west-2" \
            -backend-config="dynamodb_table=uds-ci-state-dynamodb"
          terraform plan -var="ami_id=$TEST_AMI_ID" -out=rke2-plan
          sleep 15 # time to review
          terraform apply -var="ami_id=$TEST_AMI_ID" -auto-approve rke2-plan
          kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.21"
          kubectl apply -f storage-class.yaml
        working-directory: .github/workflows/rke2

      - name: Teardown RKE2 cluster
        if: always()
        run: terraform destroy -auto-approve
        working-directory: .github/workflows/rke2

      - name: Destroy Test AMI
        run: |
          snapshot_ids=$(aws ec2 describe-images --image-ids "$TEST_AMI_ID" | jq -r .Images[].BlockDeviceMappings[].Ebs.SnapshotId)
          aws ec2 deregister-image --image-id $TEST_AMI_ID
          for snapshot in $snapshot_ids; do 
            echo "$snapshot"
            aws ec2 delete-snapshot --snapshot-id "$snapshot"
          done
          aws ec2 delete-snapshot --snapshot-id snap-1234567890abcdef0
  test-clean-install-rhel:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_COMMERCIAL_ROLE_TO_ASAMI_ID=$(jqSUME }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-west-2
          role-duration-seconds: 21600

      - name: Validate RHEL AMI
        run: make validate-ami-rhel

      - name: Publish RHEL AMI
        run: make publish-ami-rhel

      - name: Grab AMI ID
        run: echo "TEST_AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)" >> $GITHUB_ENV

      - name: Create RKE2 cluster
        env:
          SHA: ${{ github.sha }}
        run: |
          terraform init -force-copy \
            -backend-config="bucket=uds-ci-state-bucket" \
            -backend-config="key=tfstate/ci/install/${SHA:0:7}-rke2.tfstate" \
            -backend-config="region=us-west-2" \
            -backend-config="dynamodb_table=uds-ci-state-dynamodb"
          terraform plan -var="ami_id=$TEST_AMI_ID" -out=rke2-plan
          sleep 15 # time to review
          terraform apply -var="ami_id=$TEST_AMI_ID" -auto-approve rke2-plan
          kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.21"
          kubectl apply -f storage-class.yaml
        working-directory: .github/workflows/rke2

      - name: Teardown RKE2 cluster
        if: always()
        run: terraform destroy -auto-approve
        working-directory: .github/workflows/rke2

      - name: Destroy Test AMI
        run: |
          snapshot_ids=$(aws ec2 describe-images --image-ids "$TEST_AMI_ID" | jq -r .Images[].BlockDeviceMappings[].Ebs.SnapshotId)
          aws ec2 deregister-image --image-id $TEST_AMI_ID
          for snapshot in $snapshot_ids; do 
            echo "$snapshot"
            aws ec2 delete-snapshot --snapshot-id "$snapshot"
          done
          aws ec2 delete-snapshot --snapshot-id snap-1234567890abcdef0
