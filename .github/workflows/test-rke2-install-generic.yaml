name: Test Creating RKE2 Cluster

on:
  repository_dispatch:
    types: [test-command]

permissions:
  id-token: write
  contents: write # For executing the repository_dispatch event
  pull-requests: write # For doing the emoji reaction on a PR comment

defaults:
  run:
    # We need -e -o pipefail for consistency with GitHub Actions' default behavior
    shell: bash -e -o pipefail {0}

jobs:
  # Parse the command, so we can decide which tests to run.
  # Valid commands: "/test all", "/test ubuntu", "/test rhel"
  # We can do as many of these as we want to get as granular as we want.
  parse:
    runs-on: ubuntu-latest
    outputs:
      run-ping: ${{ steps.parse.outputs.run-ping }}
      test-distros: ${{ steps.parse.outputs.test-distros }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
      - name: Parse Args
        id: parse
        uses: ./.github/actions/parse-test-generic

  # Update the comment that triggered the /test command to show the run url
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
      - name: Update Comment
        uses: ./.github/actions/comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Do a simple ping/pong status update to validate things are working
  ping:
    runs-on: ubuntu-latest
    needs: parse
    if: needs.parse.outputs.run-ping == 'true'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
      - name: Ping Test
        uses: ./.github/actions/ping
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test-rke2-cluster:
    runs-on: ubuntu-latest
    if: ${{ needs.parse.outputs.test-distros != '' }}
    strategy:
      matrix:
        test-distros: ${{ fromJson(needs.parse.outputs.test-distros) }}

    name: Test ${{ matrix.test-distros }} AMI

    needs: parse

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.repository }}
          ref: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_COMMERCIAL_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-west-2
          role-duration-seconds: 21600

      - name: Validate ${{ matrix.test-distros }} AMI
        run: make validate-ami-${{ matrix.test-distros }}

      - name: Publish ${{ matrix.test-distros }} AMI
        run: make publish-ami-${{ matrix.test-distros }}

      - name: Grab AMI ID
        run: echo "TEST_AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)" >> $GITHUB_ENV

      - name: Create RKE2 cluster
        env:
          SHA: ${{ github.sha }}
        run: |
          terraform init -force-copy \
            -backend-config="bucket=uds-ci-state-bucket" \
            -backend-config="key=tfstate/ci/install/${SHA:0:7}-rke2.tfstate" \
            -backend-config="region=us-west-2" \
            -backend-config="dynamodb_table=uds-ci-state-dynamodb"
          terraform plan -var="ami_id=$TEST_AMI_ID" -out=rke2-plan
          sleep 15 # time to review
          terraform apply -var="ami_id=$TEST_AMI_ID" -auto-approve rke2-plan
          kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.21"
          kubectl apply -f storage-class.yaml
        working-directory: .github/workflows/rke2

      - name: Teardown RKE2 cluster
        if: always()
        run: terraform destroy -auto-approve
        working-directory: .github/workflows/rke2

      - name: Destroy Test AMI
        run: |
          snapshot_ids=$(aws ec2 describe-images --image-ids "$TEST_AMI_ID" | jq -r .Images[].BlockDeviceMappings[].Ebs.SnapshotId)
          aws ec2 deregister-image --image-id $TEST_AMI_ID
          for snapshot in $snapshot_ids; do 
            echo "$snapshot"
            aws ec2 delete-snapshot --snapshot-id "$snapshot"
          done
