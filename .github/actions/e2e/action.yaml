name: Run E2E Tests

description: Run E2E Tests

inputs:
  token:
    description: Access token used to update the comment
    required: true
  distro:
    description: Distro of the AMI being tested
    required: true

runs:
  using: composite
  steps:
  # Update GitHub status for pending pipeline run
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: Test ${{ inputs.distro }} AMI
        GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Setup UDS
      if: always()
      uses: defenseunicorns/uds-common/.github/actions/setup@v0.3.11

    - name: Validate ${{ inputs.distro }} AMI
      shell: bash -e -o pipefail {0}
      run: uds run --no-progress validate-ami-${{ inputs.distro }}

    - name: Publish ${{ inputs.distro }} AMI
      shell: bash -e -o pipefail {0}
      run: uds run --no-progress publish-ami-${{ inputs.distro }}

    - name: Test ${{ inputs.distro }} AMI
      shell: bash -e -o pipefail {0}

      run: uds run --no-progress test-cluster --set SHA=${{ github.sha }} --set DISTRO=${{ inputs.distro }}

    - name: Teardown test infrastructure
      shell: bash -e -o pipefail {0}
      if: always()
      run: uds run --no-progress teardown-infra --set DISTRO=${{ inputs.distro }}

    - name: Cleanup ${{ inputs.distro }} AMI
      shell: bash -e -o pipefail {0}
      if: always()
      run: uds run --no-progress cleanup-ami

    # Update GitHub status for successful pipeline run
    - name: "Update GitHub Status for success"
      if: ${{ success() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state success -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: Test ${{ inputs.distro }} AMI
        GITHUB_DESCRIPTION: "run passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for failing pipeline run
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state failure -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: Test ${{ inputs.distro }} AMI
        GITHUB_DESCRIPTION: "run failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for cancelled pipeline run
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state error -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: Test ${{ inputs.distro }} AMI
        GITHUB_DESCRIPTION: "run cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
