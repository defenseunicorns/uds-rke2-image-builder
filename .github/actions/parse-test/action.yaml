name: Parse Slash Command Dispatch (/test)

description: Parse Slash Command Dispatch (/test)

outputs:
  run-ping:
    description: Will be 'true' if the 'ping' job should run
    value: ${{ steps.parse.outputs.ping }}
  test-distros:
    description: Will be either an empty string or a json formatted array of distros
    value: ${{ steps.parse.outputs.test_distros }}
runs:
  using: composite
  steps:
    - name: Parse Args
      id: parse
      env:
        DEBUG: ${{ toJSON(github.event.client_payload.slash_command) }}
        ARGS_V2: ${{ github.event.client_payload.slash_command.args.unnamed.all }}
        EVENT_NAME: ${{ github.event_name }}
      shell: bash -e -o pipefail {0}
      run: |
        ARGS="${ARGS_V2}"
        printf "Event name is %s\n" "$EVENT_NAME"
        printf "Args are %s\n" "$ARGS"
        printf "\n\nslash_command is %s\n\n" "$DEBUG"
        DISTROS=(UBUNTU RHEL) #all options here
        TEST_DISTROS=()
        # Check if ping command is included
        if printf "%s" "${ARGS^^}" | grep -qE '\bPING\b'; then
          printf "ping=true\n" >> $GITHUB_OUTPUT
        else
          printf "ping=false\n" >> $GITHUB_OUTPUT
        fi
        if printf "%s" "${ARGS^^}" | grep -qE '\bALL\b'; then
          TEST_DISTROS+=("${DISTROS[@]}")
        else
          for distro in "${DISTROS[@]}"; do
            if printf "%s" "${ARGS^^}" | grep -qE "\b${distro}\b"; then
              TEST_DISTROS+=(${distro})
            fi
          done
        fi
        if [ ${#TEST_DISTROS[@]} -eq 0 ]; then
          printf "test_distros=""\n" >> $GITHUB_OUTPUT
        else
          printf "test_distros=%s\n" "$(jq --compact-output --null-input '$ARGS.positional' --args -- "${TEST_DISTROS[@],,}")" >> $GITHUB_OUTPUT
        fi
