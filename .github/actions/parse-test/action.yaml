name: Parse Slash Command Dispatch (/test)

description: Parse Slash Command Dispatch (/test)

outputs:
  run-ping:
    description: Will be 'true' if the 'ping' job should run
    value: ${{ steps.parse.outputs.ping }}
  run-test-clean-install-ubuntu:
    description: Will be 'true' if the 'test-clean-install-ubuntu' job should run
    value: ${{ steps.parse.outputs.ubuntu }}
  run-test-clean-install-rhel:
    description: Will be 'true' if the 'test-clean-install-rhel' job should run
    value: ${{ steps.parse.outputs.rhel }}
runs:
  using: composite
  steps:
    - name: Parse Args
      id: parse
      env:
        DEBUG: ${{ toJSON(github.event.client_payload.slash_command) }}
        ARGS_V2: ${{ github.event.client_payload.slash_command.args.unnamed.all }}
        EVENT_NAME: ${{ github.event_name }}
      shell: bash -e -o pipefail {0}
      run: |
        ARGS="${ARGS_V2}"
        printf "Event name is %s\n" "$EVENT_NAME"
        printf "Args are %s\n" "$ARGS"
        printf "\n\nslash_command is %s\n\n" "$DEBUG"
        COMMANDS=(PING UBUNTU RHEL) #all options here
        if printf "%s" "${ARGS^^}" | grep -qE '\bALL\b'; then
          # "all" explicitly does not include "ping"
          for cmd in "${COMMANDS[@]}"; do
            [[ $cmd == "PING" ]] && ! { printf "%s" "${ARGS^^}" | grep -qE '\bPING\b'; } && continue
            printf -v "$cmd" "true"
          done
        else
          for cmd in "${COMMANDS[@]}"; do
            if printf "%s" "${ARGS^^}" | grep -qE "\b${cmd}\b"; then
              printf -v "$cmd" "true"
            fi
          done
        fi
        for out in "${COMMANDS[@]}"; do
          printf "%s=%s\n" "${out,,}" "${!out:-false}" >> $GITHUB_OUTPUT
          printf "%s=%s\n" "${out,,}" "${!out:-false}"
        done