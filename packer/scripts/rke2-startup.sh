#!/bin/bash

usage() {
  echo "Usage: Utility script for installing a RKE2 cluster"
  echo "  -t  [string_val] cluster join token"
  echo "  -T  [string_val] space delimited list of TLS SANs to add to node certificate"
  echo "  -s  [string_val] cluster server join ip or hostname (Ex. 10.0.0.1 or cluster.foo.bar)"
  echo "  -a               agent flag"
  echo "  -v               Verbose information about RKE2 installation"
  echo "  -d               Print Debug information"
  echo "  -u               kube config user"
  echo "EXAMPLE Usage: "
  echo "  Server install with user set: $0 -t 24dfa62bbe214bdf -s 10.10.0.1 -u ubuntu"
  echo "  Agent install:  $0 -t 24dfa62bbe214bdf -s 10.10.0.1 -a"
  echo "  Server install with SANS:  $0 -t 24dfa62bbe214bdf -T \"awesome.hostname.com 10.10.10.10\" -s 10.10.0.1"
  exit 1
}

verbose_docs() {
echo "
RKE2 provides excellent out of the box tools to install a new RKE2 cluster. However, it requires additional knowledge and configuration to build a HA cluster. This script intends to reduce the need for such understanding and provides a best effort to easily install a RKE2 cluster. Note: This script assumes Defense Unicorns Big Bang Distro will be installed and disables some services by default (rke2-ingress-nginx, rke2-metrics-server).

Script Parameters:

'-t' RKE2 uses a token to join nodes to the cluster. This token can be generated by RKE2 on the first node install, however, this script assumes the token is generated and provided by the caller using the '-t' parameter.

'-s' RKE2 initializes on a single node. The '-s' argument is the IP address or hostname of the bootstrap node or cluster control plane and is used by a new node to join the cluster. When this is either unset or matches the IP of the host RKE2 is being started on, RKE2 will initialize as the bootstrap node. RKE2 running on this node provides information during \"cluster up\" and node join operations. It does not have any impact on the cluster operation after initialization. i.e. RKE2 master nodes work together in an HA configuration.

'-a' RKE2 has server or agent nodes. Agent nodes are Kubernetes worker nodes and do not host critical services like etcd or control-plane deployments.

'-u' The kube config file gets saved under this user's home directory. When this is not set, the user running the script is used (root).

'-T' By default cluster generated certificate is only valid for the loopback address and private IPs it can find on interfaces. When accessing cluster from a hostname or public IP, they need to be provided so they can be added to the cluster certificate.

Recommended Usage:
  Node0: \$0 -t <token> -s <node0_ip>
  Node1: \$0 -t <token> -s <node0_ip>
  Node2: \$0 -t <token> -s <node0_ip>
  NodeN: \$0 -t <token> -s <node0_ip> -a

This recommendation would build an HA cluster consistent with the recommendations in the RKE2 documentation. These commands could be executed simultaneously on each node. The RKE2 systemd service (registered by this script) has retry logic and will wait for the first node to be ready in order to join the cluster.

RKE2 Links:
- RKE2 Releases: https://github.com/rancher/rke2/releases
- Air-Gap Install: https://docs.rke2.io/install/airgap#tarball-method
- RKE2 Installation options: https://docs.rke2.io/install/methods
- RKE2 Configuration file: https://docs.rke2.io/install/configuration
- RKE2 High-availability: https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-cluster-setup/rke2-for-rancher
"
exit 0
}

info() {
  echo -e "\033[1;32m[INFO]\033[0m $1"
}

# Function to print debug messages
debug() {
  if [ "$debug" ]; then
    echo -e "\033[1;34m[DEBUG]\033[0m $1"
  fi
}

if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

if [ $# -eq 0 ]; then
  usage
fi

debug=0

while getopts "t:T:s:u:avd" o; do
  case "${o}" in
    t) token=${OPTARG} ;;
    T) tls_sans=${OPTARG} ;;
    s) server_host=${OPTARG} ;;
    a) agent=1 ;;
    d) debug=1 ;;
    u) user=${OPTARG} ;;
    v) verbose_docs ;;
    *) usage ;;
  esac
done
shift $(($OPTIND - 1))

info "Starting RKE2 cluster"
node_ip=$(ip route get $(ip route show 0.0.0.0/0 | grep -oP 'via \K\S+') | grep -oP 'src \K\S+')

if [ "$user" == "" ]; then
  user=$USER
fi

debug "Server IP: $server_host"
debug "Agent: $agent"
debug "Node IP: $node_ip"
debug "TLS SANS: $tls_sans"

if [ "$server_host" != "$node_ip" ]; then
  debug "Updating Config file with Cluster Join Server IP"
  echo "server: https://${server_host}:9345" | tee -a $config_file >/dev/null
fi
if [ "$token" ]; then
  debug "Updating Config file with Cluster Join token"
  echo "token: ${token}" | tee -a $config_file >/dev/null
fi
if [ "${tls_sans}" ]; then
  debug "Updating Config file with TLS SANs"
  echo "tls-san:" | tee -a $config_file >/dev/null
  for san in $tls_sans
  do
    echo "  - \"${san}\"" | tee -a $config_file >/dev/null
  done
fi

# Start RKE2
if [ -z $agent ]; then
  debug "Enabling systemd service for RKE2 Server"
  systemctl enable rke2-server.service
  systemctl start rke2-server.service
else
  debug "Enabling systemd service for RKE2 Agent"
  systemctl enable rke2-agent.service
  systemctl start rke2-agent.service
fi

# Ensure host permissions match STIG rules
info "Updating file permissions for STIG rules"
chmod 640 /var/lib/rancher/rke2/agent/*.kubeconfig
chmod 750 /var/lib/rancher/rke2/bin/*
chmod 750 /var/lib/rancher/rke2/data
if [ -d "/var/lib/rancher/rke2/server" ]; then
  chmod 750 /var/lib/rancher/rke2/server/logs
  chmod 750 /var/lib/rancher/rke2/server/manifests
fi

# Copy kubeconfig to default user home directory
debug "Copying kubeconfig to user home directory"
mkdir /home/$user/.kube
cp /etc/rancher/rke2/rke2.yaml /home/$user/.kube/config
chown -R $user:$user /home/$user/.kube

# Copy kubectl into /usr/local/bin so it is in user's PATH
cp /var/lib/rancher/rke2/bin/kubectl /usr/local/bin/kubectl
chmod 755 /usr/local/bin/kubectl

info "RKE2 Startup Complete"
